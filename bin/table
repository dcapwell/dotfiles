#!/usr/bin/env python3

import fileinput
import sys
import argparse

_DEFAULT_DELIMITER = '|'
_DEFAULT_PREFIX = ' '
_DEFAULT_POSTFIX = ' '

def normalize(value, size):
    for ignore in range(0, size - len(value)):
        value += ' '
    return value

def read(to_read):
    if to_read == '-':
        return fileinput.input(files='-')
    else:
        return fileinput.input(files=to_read)

def parse_args():
    parser = argparse.ArgumentParser(description='Table')
    parser.add_argument('--delimiter', type=str, default=_DEFAULT_DELIMITER, help=f'What delimiter to use cross columns; default "{_DEFAULT_DELIMITER}"')
    parser.add_argument('--prefix', type=str, default=_DEFAULT_PREFIX, help=f'What to add in front of the column; default "{_DEFAULT_PREFIX}"')
    parser.add_argument('--postfix', type=str, default=_DEFAULT_POSTFIX, help=f'What to add after the column; default "{_DEFAULT_POSTFIX}"')
    return parser.parse_args()

class Table:
    def __init__(self):
        self.sizes = []
        self.rows = []

    def add(self, row):
        if not row:
            return
        self.rows.append(row)
        for i in range(0, len(row) - len(self.sizes)):
            self.sizes.append(0)
        for i in range(0, len(row)):
            current = self.sizes[i]
            current = max(current, len(row[i]))
            self.sizes[i] = current

    def __str__(self, delimiter=_DEFAULT_DELIMITER, prefix=_DEFAULT_PREFIX, postfix=_DEFAULT_POSTFIX):
        s = ""
        for row in self.rows:
            # add extra columns if needed
            for i in range(len(row), len(self.sizes)):
                row.append('')
            for i in range(0, len(row)):
                size = self.sizes[i]
                s += f'{delimiter}{prefix}{normalize(row[i], size)}{postfix}'
            s += f"{delimiter}\n"
        if s:
            s = s[:-1]
        return s

args = parse_args()

table = Table()
for line in read('-'):
    table.add(line.split())
s = table.__str__(delimiter=args.delimiter, prefix=args.prefix, postfix=args.postfix)
if s:
    print(s)
